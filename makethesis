#!/bin/bash
# --------------------------------------------------------------------------
# Filename: makethesis
# Author: Xianling Wang <rioxwang@foxmail.com>
# Created: 2013-07-08
# Modified: 2015-01-02
# Version: 1.4
# --------------------------------------------------------------------------
# Change Log
# v1.0: Batch file created.
#       1. 'clean', 'install' and 'thesis' functions are defined.
#       2. 'xetex' engine w/o chapbib are defined.
# v1.1: File mode modified, function added.
#       1. Change the dos-style line break into unix-style line break: <CR><LF> -> <LF>.
#       2. 'wordcount' function is defined.
# v1.4: Modify output redirecting.

# Change Log by Zhang Cong <zhangcongbupt@bupt.edu.cn>
# Add 'cleanall' 'open' 'openhtml' 'backup' parameter.
# Modify 'clean' 'wordcount' functions.

# --------------------------------------------------------------------------
# User Configuration
# Project name
PROJECT="buptgraduatethesis"
# File name of your top-level tex file.
TARGET="main"
# File name list of tex files for mainmatters.
MAINMATTERS=(
    "chapter1"
    "chapter2"
    "chapter3"
    "chapter4"
    "chapter5"
    # "chapter6"
    # "chapter7"
    )
# Driver type to build PDF.
# 'xetex' for xetex engine;
DRIVER="xetex"
# Bib type to construct bibliography.
# 'chapbib' for bib per chapter; 'allbib' for bib in thesis end.
BIBTYPE="chapbib"
#BIBTYPE="allbib"
# Word count filename
WORDCOUNT="wordcount"
# --------------------------------------------------------------------------
# Function: Clearance
# TMP File Clearance
function clean()
{
    echo Clearing TMP files...
    echo Clearing TMP files in installation...
    rm -f *.dvi *.ps > /dev/null
    echo Clearing TMP files in thesis generation...
    rm -f *.bbl *.blg *.aux *.log *.acn *.glo *.ist *.acr *.alg *.out *.toc *.thm *.ps *.dvi > /dev/null
    rm -f *.lof *.lot *.fls *.synctex.gz *.fdb_latexmk ${WORDCOUNT}.html > /dev/null
    echo ===========================================
    echo = Mission Done!
    echo = ALL TMP files are cleared!
    echo ===========================================
    exit
}
# --------------------------------------------------------------------------
# Function: Wordcount
# Word Count
function wordcount()
{
    # Prevent "${TARGET}.bbl" not exsit error
    if [ ! -f "${TARGET}.bbl" ]; then
        touch ${TARGET}.bbl
    fi
    echo Counting word...
    texcount -ch -inc -incbib -html -v -sum ${TARGET}.tex > ${WORDCOUNT}.html
    COUNT=$(cat ${WORDCOUNT}.html | grep "<li>Sum count:.*</li>" | tail -1 | sed 's/[^0-9]//g')
    echo ===========================================
    # echo = Counting Mission Done!
    echo = Total words: ${COUNT}.
    echo = Word-counting Results are recorded in ${WORDCOUNT}.html!
    echo ===========================================
    exit
}
# --------------------------------------------------------------------------
# Function: Making Thesis PDF
# Thesis PDF Generation
function thesis()
{
    # Check the user input configuration.
    echo ===========================================
    echo =
    echo = TARGET=${TARGET}
    echo = MAINMATTERS=${MAINMATTERS[@]}
    echo = DRIVER=${DRIVER}
    echo = BIBTYPE=${BIBTYPE}
    echo =
    echo ===========================================
    echo Double check above configurations! Press anykey to continue, CTRL+C to stop!
    # read -n1
    # Check the integrity of the installation.
    echo Checking Existence of Essential Files...
    if [ -f "${PROJECT}.cls" -a -f "${PROJECT}.cfg" -a -f "${PROJECT}.bst" ]; then
        echo Document class installed! Generating Thesis PDF...
    else
        echo ===========================================
        echo = Mission Failed!
        echo = Cannot find essential files!
        echo = Please './makethesis install' to reinstall BUPTGraduateThesis!
        echo ===========================================
        exit
    fi

    # Generate the thesis PDF according to different configurations.
    if [ ${DRIVER} = "xetex" ]; then
        echo Building thesis PDF...
        xelatex ${TARGET}
        echo Processing BIB files...
        if [ ${BIBTYPE} = "chapbib" ]; then
            for MATTER in ${MAINMATTERS[@]}
            do
                bibtex ${MATTER} > /dev/null
            done
        else
            bibtex ${TARGET} > /dev/null
        fi
        bibtex jrnl.aux > /dev/null
        bibtex conf.aux > /dev/null
        bibtex patent.aux > /dev/null
        echo Processing index files...
        makeindex -s ${TARGET}.ist -t ${TARGET}.alg -o ${TARGET}.acr ${TARGET}.acn > /dev/null
        echo Rebuilding to generate cross-reference...
        xelatex ${TARGET} > /dev/null
        xelatex ${TARGET} > /dev/null
    else
        echo Engine Undefined!
        exit
    fi
    echo ===========================================
    echo = Mission Done!
    echo = Thesis PDF is successfully generated!
    echo ===========================================
    # exit
}
# --------------------------------------------------------------------------
# Function: Installation
# Document Class and Help PDF File Generation
function install()
{
    mkdir example
    echo Extracting and installing files...
    xetex install/${PROJECT}.ins
    echo Building user guide...
    xelatex -no-pdf install/${PROJECT}.dtx
    makeindex -q -s gglo.ist -o ${PROJECT}.gls ${PROJECT}.glo
    echo Rebuilding to generate change-log...
    xelatex -no-pdf install/${PROJECT}.dtx > /dev/null
    makeindex -q -s gglo.ist -o ${PROJECT}.gls ${PROJECT}.glo > /dev/null
    echo Rebuilding to generate cross-reference...
    xelatex install/${PROJECT}.dtx
    echo Clearing TMP files...
    rm -f ${PROJECT}.aux ${PROJECT}.glo ${PROJECT}.ilg ${PROJECT}.ind
    rm -f ${PROJECT}.out ${PROJECT}.toc ${PROJECT}.idx ${PROJECT}.hd ${PROJECT}.xdv ${PROJECT}.gls
    echo ===========================================
    echo = Mission Done!
    echo = BUPTGraduateThesis is successfully installed!
    echo ===========================================
    exit
}

function backup()
{
    if [ ! -f "${TARGET}.pdf" ]; then
        echo "${TARGET}.pdf not exsit."
        exit
    fi
    if [ ! -d "backup" ];then
        mkdir backup
    fi
    TIME=$(date "+%Y%m%d%H%M%S")
    cp ${TARGET}.pdf backup/${TARGET}_${TIME}.pdf
    echo "backup/${TARGET}_${TIME}.pdf is created."
    exit
}

# --------------------------------------------------------------------------
# Main Function Selection
# Default Selection: thesis
if [ "$#" = 1 ]; then
    if [ "$1" = "install" ]; then
        install
    elif [ "$1" = "thesis" ]; then
        thesis
    elif [ "$1" = "clean" ]; then
        clean
    elif [ "$1" = "wordcount" ]; then
        wordcount
    elif [ "$1" = "cleanall" ]; then
        rm -f main.pdf > /dev/null
        clean
    elif [ "$1" = "open" ]; then
        open ${TARGET}.pdf
    elif [ "$1" = "reopen" ]; then
        ps -ef | grep "/Applications/Adobe Acrobat Reader DC.app/Contents/MacOS/AdobeReader" | grep -v grep | awk '{print $2}' | xargs kill -9
        open ${TARGET}.pdf
    elif [ "$1" = "close" ]; then
        ps -ef | grep "/Applications/Adobe Acrobat Reader DC.app/Contents/MacOS/AdobeReader" | grep -v grep | awk '{print $2}' | xargs kill -9
    elif [ "$1" = "openhtml" ]; then
        open ${WORDCOUNT}.html
    elif [ "$1" = "backup" ]; then
        backup
    else
        echo ===========================================
        echo = Undefined Parameter!
        echo ===========================================
    fi
elif [ "$#" = 0 ]; then
    thesis
else
    echo ===========================================
    echo = Input Parameter Error!
    echo = You should input at most 1 parameter.
    # echo =     install
    # echo =     thesis
    # echo =     clean
    echo = or leave it blank for default!
    echo ===========================================
fi
# EOF

